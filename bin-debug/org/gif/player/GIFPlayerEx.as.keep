package org.gif.player
{
	import flash.display.BitmapData;
	import flash.errors.ScriptTimeoutError;
	import flash.events.Event;
	import flash.events.IOErrorEvent;
	import flash.events.TimerEvent;
	import flash.geom.Matrix;
	import flash.geom.Rectangle;
	import flash.net.URLLoader;
	import flash.net.URLLoaderDataFormat;
	import flash.net.URLRequest;
	import flash.utils.ByteArray;
	import flash.utils.Timer;
	
	import mx.containers.Canvas;
	
	import org.gif.decoder.GIFDecoder;
	import org.gif.errors.FileTypeError;
	import org.gif.events.FileTypeEvent;
	import org.gif.events.FrameEvent;
	import org.gif.events.GIFPlayerEvent;
	import org.gif.events.TimeoutEvent;
	import org.gif.frames.GIFFrame;	

	public class GIFPlayerEx extends Canvas
	{
		private var urlLoader:URLLoader;
		private var gifDecoder:GIFDecoder
		private var aFrames:Array;
		private var myTimer:Timer;
		private var iInc:int;
		private var iIndex:int;
		private var auto:Boolean;
		private var arrayLng:uint;
	
		//组件属性
		private var _transformMatrix:Matrix = null;
		private var _verticalAlign:String = "bottom";
		private var _horizontalAlign:String = "center";
		private var _frameScaleX:Number = 1;
		private var _frameScaleY:Number = 1;
		
		[Bindable]
		public var repeat:Boolean = false;
		[Bindable]
		public var smooth:Boolean = false;
		
		
		public function get frameRect():Rectangle
		{
			return aFrames[0].bitmapData.rect;
		}
		
		[Bindable]
		public function get frameScaleX():Number
		{
			return _frameScaleX;
		}
		
		public function set frameScaleX(data:Number):void
		{
			_frameScaleX = Number(data);
			updateMatrix();
		}
		
		[Bindable]
		public function get frameScaleY():Number
		{
			return _frameScaleY;
		}
		
		public function set frameScaleY(data:Number):void
		{
			_frameScaleY = Number(data);
			updateMatrix();
		}
		
		[Bindable]
		public function get transformMatrix():Matrix
		{
			return _transformMatrix;
		}
		
		public function set transformMatrix(data:Matrix):void
		{
			_transformMatrix = data;
			updateMatrix();
		}
		
		[Bindable]
		public function get verticalAlign():String
		{
			return _verticalAlign;
		}
		
		public function set verticalAlign(data:String):void
		{
			_verticalAlign = data;
			updateMatrix();
		}
		
		[Bindable]
		public function get horizontalAlign():String
		{
			return _horizontalAlign;
		}
		
		public function set horizontalAlign(data:String):void
		{
			_horizontalAlign = data;
			updateMatrix();
		}		
		
		
		//构造
		public function GIFPlayerEx (pAutoPlay:Boolean = true )
		{			
			super();

			auto = pAutoPlay;
			iIndex = iInc = 0;
			
			myTimer = new Timer ( 0, 0 );
			aFrames = new Array;
			urlLoader = new URLLoader;
			urlLoader.dataFormat = URLLoaderDataFormat.BINARY;
			
			urlLoader.addEventListener ( Event.COMPLETE, onComplete );
			urlLoader.addEventListener ( IOErrorEvent.IO_ERROR, onIOError );
			
			myTimer.addEventListener ( TimerEvent.TIMER, update );
			
			this.addEventListener(GIFPlayerEvent.COMPLETE, onCompleteGIFLoad);
			
			gifDecoder = new GIFDecoder();
		}
		
		private function updateMatrix():void
		{
			var rc:Rectangle = new Rectangle();
			_transformMatrix = new Matrix();
			
			rc = frameRect;
			var mat:Matrix = _transformMatrix;
			
			if(_frameScaleX == 0 || _frameScaleY == 0)
			{
				mat.scale(width / rc.width, height / rc.height);
				rc.width = width;
				rc.height = height;
			}
			else if(_frameScaleX > 0 && _frameScaleY > 0)
			{
				mat.scale(_frameScaleX, _frameScaleY);
				rc.width = rc.width * _frameScaleX;
				rc.height = rc.height * _frameScaleY;
			}
			
			var dx:Number = 0;
			var dy:Number = 0;			
			if(_horizontalAlign == "center")
			{
				dx = (width - rc.width) / 2;
			}
			else if(_horizontalAlign == "left")
			{
				dx = 0;
			}
			else
			{
				dx = width - rc.width;
			}
								
			if(_verticalAlign == "middle")
			{
				dy = (height - rc.height) / 2;
			}
			else if(_verticalAlign == "top")
			{
				dy = 0;
			}
			else
			{
				dy = height - rc.height;
			}
			
			mat.translate(dx, dy);			
		}
		
		public function clear():void
		{
			this.stop();
			this.graphics.clear();
		}
		
		private function onCompleteGIFLoad (pEvt:GIFPlayerEvent ):void
		{
			updateMatrix();
		}
		
		private function drawBitmap(bmp:BitmapData):void
		{
			this.graphics.clear();
			this.graphics.beginBitmapFill(bmp, _transformMatrix, repeat, smooth);
			this.graphics.drawRect(0,0,width, height);
			this.graphics.endFill();
		}
		
		private function onIOError ( pEvt:IOErrorEvent ):void
		{
			dispatchEvent ( pEvt );
		}
		
		private function onComplete ( pEvt:Event ):void 
		{
			readStream ( pEvt.target.data );
		}
		
		private function readStream ( pBytes:ByteArray ):void
		{
			var gifStream:ByteArray = pBytes;
			
			aFrames = new Array;
			iInc = 0;
			
			try 
			{
				gifDecoder.read ( gifStream );
				var lng:int = gifDecoder.getFrameCount();
				
				for ( var i:int = 0; i< lng; i++ ) 
				{
					aFrames[int(i)] = gifDecoder.getFrame(i);
				}
					
				dispatchEvent ( new GIFPlayerEvent ( 
					GIFPlayerEvent.COMPLETE , aFrames[0].bitmapData.rect ) );
				
				arrayLng = aFrames.length;
				
				auto ? play() : gotoAndStop (1);

			} 
			catch ( e:ScriptTimeoutError )
			{
				dispatchEvent ( new TimeoutEvent ( TimeoutEvent.TIME_OUT ) );	
			} 
			catch ( e:FileTypeError )
			{
				dispatchEvent ( new FileTypeEvent ( FileTypeEvent.INVALID ) );
			} 
			catch ( e:Error )
			{
				throw new Error (
					"An unknown error occured, make sure the GIF file contains at least one frame\nNumber of frames : " + 
					aFrames.length);
			}
		}
		
		private function update ( pEvt:TimerEvent ) :void
		{
			var delay:int = aFrames[ iIndex = iInc++ % arrayLng ].delay;
			pEvt.target.delay = ( delay > 0 ) ? delay : 100;
			
			switch ( gifDecoder.disposeValue ) 
			{
				case 1:
					//if ( !iIndex ) 
					//{
					//	bitmapData = aFrames[ 0 ].bitmapData.clone();
					//}
					//bitmapData.draw ( aFrames[ iIndex ].bitmapData );
					
					drawBitmap(aFrames[ iIndex ].bitmapData);
					break
				case 2:
					//bitmapData = aFrames[ iIndex ].bitmapData;
					drawBitmap(aFrames[ iIndex ].bitmapData);				
					break;
			}
			dispatchEvent ( new FrameEvent ( FrameEvent.FRAME_RENDERED, aFrames[ iIndex ] ) );
		}
		
		
		private function concat ( pIndex:int ):int
		{
			for (var i:int = 0; i< pIndex; i++ ) 
			{
				//bitmapData.draw ( aFrames[ i ].bitmapData );
				drawBitmap(aFrames[ i ].bitmapData);
			}
			return i;
		}
		
		/**
		 * Load any GIF file
		 *
		 * @return void
		*/
		public function loadGif ( pRequest:URLRequest ):void
		{
			stop();
			urlLoader.load ( pRequest );
		}
		
		/**
		 * Load any valid GIF ByteArray
		 *
		 * @return void
		*/
		public function loadBytes ( pBytes:ByteArray ):void 
		{
			readStream ( pBytes );
		}
		
		/**
		 * Start playing
		 *
		 * @return void
		*/
		public function play ():void
		{
			if ( aFrames.length ) 
			{
				if ( !myTimer.running ) myTimer.start();
			} 
			else 
			{
				throw new Error ("Nothing to play");
			}
		}
		
		/**
		 * Stop playing
		 *
		 * @return void
		*/
		public function stop ():void
		{
			if ( myTimer.running ) myTimer.stop();
		}
		
		/**
		 * Returns current frame being played
		 *
		 * @return frame number
		*/
		public function get currentFrame ():int
		{	
			return iIndex+1;
		}
		
		/**
		 * Returns GIF's total frames
		 *
		 * @return number of frames
		*/
		public function get totalFrames ():int
		{
			return aFrames.length;
		}
				
		/**
		 * Returns how many times the GIF file is played
		 * A loop value of 0 means repeat indefinitiely.
		 *
		 * @return loop value
		*/
		public function get loopCount ():int
		{
			return gifDecoder.getLoopCount();
		}
		
		/**
		 * Returns is the autoPlay value
		 *
		 * @return autoPlay value
		*/
		public function get autoPlay ():Boolean
		{
			return auto;
		}
		
		/**
		 * Returns an array of GIFFrame objects
		 *
		 * @return aFrames
		*/
		public function get frames ():Array
		{
			return aFrames;
		}
		
		/**
		 * Moves the playhead to the specified frame and stops playing
		 *
		 * @return void
		*/
		public function gotoAndStop (pFrame:int):void
		{
			if ( pFrame >= 1 && pFrame <= aFrames.length ) 
			{
				iInc = int(int(pFrame)-1);
				switch ( gifDecoder.disposeValue ) 
				{
					case 1:
						//bitmapData = aFrames[ 0 ].bitmapData.clone();
						//bitmapData.draw ( aFrames[ concat ( iInc ) ].bitmapData );
						drawBitmap(aFrames[ concat ( iInc ) ].bitmapData);
						break
					case 2:
						//bitmapData = aFrames[ iInc ].bitmapData;
						drawBitmap(aFrames[ iInc ].bitmapData);
						break;
				}		
				if ( myTimer.running ) myTimer.stop();
			} 
			else 
			{
				throw new RangeError 
					("Frame out of range, please specify a frame between 1 and " + 
					aFrames.length );
			}
			
		}
		
		/**
		 * Starts playing the GIF at the frame specified as parameter
		 *
		 * @return void
		*/
		public function gotoAndPlay (pFrame:int):void
		{
			if ( pFrame >= 1 && pFrame <= aFrames.length ) 
			{
				iInc = int(int(pFrame)-1);
				switch ( gifDecoder.disposeValue ) 
				{
					case 1:
						//bitmapData = aFrames[ 0 ].bitmapData.clone();
						//bitmapData.draw ( aFrames[ concat ( iInc ) ].bitmapData );
						drawBitmap(aFrames[ concat ( iInc ) ].bitmapData);
						break
					case 2:
						//bitmapData = aFrames[ iInc ].bitmapData;
						drawBitmap(aFrames[ iInc ].bitmapData);
						break;
				}
				if ( !myTimer.running ) myTimer.start();
			} 
			else 
			{
				throw new RangeError (
					"Frame out of range, please specify a frame between 1 and " + 
					aFrames.length );
			}
		}
		
		/**
		 * Retrieves a frame from the GIF file as a BitmapData
		 *
		 * @return BitmapData object
		*/
		public function getFrame ( pFrame:int ):GIFFrame
		{
			var frame:GIFFrame;
			if ( pFrame >= 1 && pFrame <= aFrames.length ) 
			{
				frame = aFrames[ pFrame-1 ];
			}		
			else
			{
				throw new RangeError (
					"Frame out of range, please specify a frame between 1 and " + 
					aFrames.length );
			}
			return frame;
		}
		
		/**
		 * Retrieves the delay for a specific frame
		 *
		 * @return int
		*/
		public function getDelay ( pFrame:int ):int
		{
			var delay:int;
			if ( pFrame >= 1 && pFrame <= aFrames.length ) 
			{
				delay = aFrames[ pFrame-1 ].delay;
			}
			else
			{
				throw new RangeError (
					"Frame out of range, please specify a frame between 1 and " + 
					aFrames.length );
			}
			return delay;
		}		
		
	}
}